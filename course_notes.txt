/// ** COURSE NOTES ** ///


-------------------
| manage.py STUFF |
---------------------------------------------------------------
must add this to manage.py file:
  sys.path.append('/Users/micahbeckman/codeprojects/udemy-django/djangoenv/lib/python3.7/site-packages')

---------------------------------------------------------------


----------------
| MODELS STUFF |
---------------------------------------------------------------
add classes to the <app_name>/models.py file

for foreign keys, the on_delete needs to be defined: on_delete=models.CASCADE

to initialize the database using the models:
  1) type 'python manage.py migrate' in the main project directory
    ** terminal output will show: 'Operations to perform' & 'Running migrations'
  2) type 'python manage.py makemigrations <app_name>' in the main project directory
    **terminal output will show: 'Migrations for <app_name>'
  3) once more, type 'python manage.py migrate' in the main project directory
    ** once more, terminal output will show: 'Operations to perform' & 'Running migrations'

to interact with the new database:
  1) type 'python manage.py shell' in the main project directory
  2) import a class: 'from <app_name>.models import Topic'
  3) see what's in the model: 'print(Topic.objects.all())'
  4) put some data in: 't = Topic(top_name="Social Network")'
  5) and save: 't.save()'
  6) look again: 'print(Topic.objects.all())'
    ** you'll see what you put in

to register your models (to use admin portal to interact):
    1) add this to <app_name>/admin.py file:
      1) from first_app.models import model1, model2, ...
      2) admin.site.register(model1)
      3) admin.site.register(model2)
    2) create a super user
      1) type 'python manage.py createsuperuser' in the main project directory
      2) submit username, email, password (testpassword)
      3) run server to take a look
      4) 'python manage.py runserver' to take a peek-a-roo
      5) go to localhost:8000/admin/

to populate models with dummy data:
  1) pip install Faker (https://faker.readthedocs.io/en/master/)



---------------------------------------------------------------


----------------
| MTV PARADIGM |
---------------------------------------------------------------
general flow:
  1) in the views.py file, we imprt any models that we will need
  2) use the view to query the model for data that we will need
  3) pass results from the model to the template
  4) edit the template so that it is ready to accept and display the data form the model
  5) map the URL to the view

---------------------------------------------------------------


---------------------
| settings.py STUFF |
---------------------------------------------------------------
must add this to INSTALLED_APPS list:
  '<app_name>'

---------------------------------------------------------------


---------------------
| URL MAPPING STUFF |
---------------------------------------------------------------
1) import views from the application:
  from <app_name> import views
2) add to the urlpatterns list:
  path('<routing>', views.<function_name>, name='<ref_name>')

to extend the project to include multiple apps:
  1) make a new urls.py file in the app folder
  2) add: from django.urls import path & from . import views
  3) add: urlpatterns = [path('first_app/', include('first_app.urls')), ...]
  ** this is the indicator to look into a specific app folder
  ** www.domainname.com/first_app/
  ** the project will import all the mappings from the app

---------------------------------------------------------------


-------------
| TEMPLATES |
---------------------------------------------------------------
a template will contain all the static parts of an html page

template tags are the location where dynamic content can be inserted
  ** this is achieved by using the render function in the original index() function in the views.py file

to get started:
  1) create a templates folder in the project directory
  2) create separate folders for each app
  ** first_project/templates/first_app
  3) let django know where to look for the templates by editing the DIR key in the TEMPLATES dict
  ** hardcoded file paths will cause issues
  4) use the os module to find the location of the project instance
  ** os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
  ** this assumes the file is in a directory that's in a directory
  5) os.path.join(BASE_DIR, "templates")
  ** this makes a system-agnostic location for the templates folder

usage:
  1) the html file should have {{ <template_tag> }} somewhere
  2) views.py file in the app needs to have dictionaries in the form { <template_tag>: <some content>}
  3) the render function is used in the return: render(request, <html_file_ref>, context=<the_dictionary>)

---------------------------------------------------------------


-----------------
| TEMPLATE TAGS |
---------------------------------------------------------------
if statement:
  {% if <thing> %}

for statements:
  {% for <thing> in <list> %}
  {% endfor %}


---------------------------------------------------------------


---------------------
| STATIC FILE STUFF |
---------------------------------------------------------------
initial setup:
  1) create a "static" folder in the main project directory
  2) create subfolders such as "images" within the static folder

---------------------------------------------------------------


----------------------
| DJANGO SETUP STUFF |
---------------------------------------------------------------
in project folder:
  django-admin startproject first_project .
  ** that creates a first_project package inside a first_project project
  ** The period . is crucial because it tells the script to install Django in your current directory

---------------------------------------------------------------


------------------------
| RUNNING DJANGO STUFF |
---------------------------------------------------------------
in project folder:
  python manage.py runserver
  ** starts dev server at http://127.0.0.1:8000/

to create a new application:
  python manage.py startapp first_app
---------------------------------------------------------------


------------------------
| PROJECT FOLDER STUFF |
---------------------------------------------------------------
all of this is autogenerated when starting a project and initializing an app:
project_name
  app_name_1
    migrations --> directory that stores DB-specific info as it relates to models
    __init__.py --> so python knows it's a package
    admin.py --> used to register models
    apps.py --> place for application-specific configurations
    models.py --> place to store the application's data
    tests.py --> place to store test functions
    views.py --> place to store functions that handle requests and return responses
  project_name
    __init__.py --> so python knows it's a package
    settings.py --> list of apps, security stuff, debug option, etc.
    urls.py --> list of routes
    wsgi.py --> no idea what this is
  static --> folder for holding page content
    images
    css
      css_file_1.css
    etc.
  templates --> folder for holding app-specific .html templates
    app_name_1
    app_name_2
    ...
  db.sqlite3 --> db file when using sqlite3 (default)
  manage.py --> the "main" called to start the server (runserver)

---------------------------------------------------------------


-------------
| GIT STUFF |
---------------------------------------------------------------
to pull a project to a new instance of git on a new machine:
  git pull https://github.com/micahdanger/udemy-django master

to get the master branch on a machine:
  git checkout master

atom will let you fetch changes to master from github
---------------------------------------------------------------


------------------------
| PIP/VIRTUALENV STUFF |
---------------------------------------------------------------
in project folder:
  virtualenv --relocatable <project_name>
  ** sets up virtual environment
  ** makes it relocatable with relative paths

to run:
  source <environment_name>/bin/activate
  ** starts the virtual environment

to stop:
  deactivate
  ** stops the virtual environment

to gather project requirements:
  pip freeze --local > requirements.txt
  ** makes a file with package requirements listed

to remove a virtual environment:
  rm -rf <venv_name>/

to install using requirements.txt file:
  pip install -r requirements.txt
---------------------------------------------------------------
